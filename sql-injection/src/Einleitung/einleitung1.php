<body>

    <span style="color:blue;"> <a href="#dif" style="text-decoration:none">1. Eine Definition: SQL-Injection</a></span><br><br>
    <span style="color:blue;"> <a href="#uebersicht" style="text-decoration:none">2. Übersicht SQL-Injection Challenges</a></span><br><br>
    <span style="color:blue;"><a href="#massnahmen" style="text-decoration:none"> 3. Sicherheitsmaßnahmen gegen SQL-Injection</a> </span><br><br>
    <a href="../../index.php">Zurück</a><br><br>



    <div id="dif" style="background-color: #0000000d;border-top-left-radius: 10px;border-top-right-radius: 10px;border-bottom-left-radius: 10px;border-bottom-right-radius: 10px;width: 1250px;margin: 10px auto;padding: 10px 51px;">
        <h1> SQL-Injection: Eine Definition </h1>
        <span style="font-size: 16px;"> SQL-Injection ist häufig genutzte Attacke in Web-Anwendungen. Die meisten Sicherheitslücken bestehen bei Datenbankabfragen
            wie zum Beispiel ein Suchbegriff bei einer Suche oder der Benutzername bei einer Anmeldung. Beispiele für ausführbare SQL-Injection sind: </span><br><br>
        1. SELECT * FROM ‘Produkt‘ WHERE ‘Name‘ LIKE ’%begriff%’; (Angreifbarer SQL-Query für eine Suche )<br><br>
        2. DROP TABLE ‘Product‘; (Gefärliche ausgeführbare Abfrage) <br></span><br><br>
        Es gibt unterschiedliche Arten von SQL-Injections. Dabei handelt es sich um die folgenden:
        <br><br><strong> -> Error-based SQL-Injections</strong><br>Angreifer versuchen mithilfe Sonderzeichen auszunutzen, ob auf die Datenbank zugzugreifen. Dabei reicht im einfachsten Fall das Einfügen eines Anführungszeichens ', um ein SQL-Statement so zu verändern, dass es zu einem Fehler führt.<br><br> <strong>-> Union-based SQL-Injections</strong><br>Bei union-basierten SQL-Injections wird der Operator UNION aus SQL ausgenutzt, um das Ergebnis von mehreren SELECT-Statements in ein Resultat zu kombinieren, das dann zurückgegeben wird. Damit können die Daten von anderen Tabellen innerhalb der Datenbank abgefragt werden.<br><br><strong>-> Boolean-based blind SQL-Injections</strong>
        <br> Bei boolean-based blind SQL-Injections wird ein SQL-Statement so verändert, dass entweder eine wahre oder eine falsche Aussage entsteht. Wenn sich die Antworten zu einer dieser Aussagen verändert, kann durch eine Serie von Anfragen die Datenbank Zeichen für Zeichen ausgelesen werden.<br><br><strong>-> Time-based blind SQL-Injections</strong><br>Bei time-based blind SQL-Injections werden SQL-Statements injected, die bei einer wahren Aussage verzögern und bei einer falschen Aussage sofort Antworten. Damit kann wieder Zeichen für Zeichen der Datenbank ausgelesen werden.<br><br>
        <strong>-> Out-of-band blind SQL-Injections</strong><br>Bei out-of-band blind SQL-Injection wird versucht eine Netzwerkinteraktion mit einem durch den Angreifer kontrollierten System herzustellen. Dabei wird in den meisten Fällen versucht eine DNS-Abfrage auszulösen.</span><br><br>
    </div>
    <br>


    <div id="uebersicht" style="background-color: #0000000d;border-top-left-radius: 10px;border-top-right-radius: 10px;border-bottom-left-radius: 10px;border-bottom-right-radius: 10px;width: 1250px;margin: 10px auto;padding: 10px 51px;">
        <h1> Übersicht SQL-Injection Challenges </h1>
        <span style="font-size: 16px;"> SQL-Injection Challenge beiinhaltet 2 Challenges. Der Schwierigkeitsgrad der Challenges ist in einfach und mittel Stufe eingeteilt.
            Wenn du etwas Erfahrungen mit SQL-Injection hast, kann es sein, dass die Challenges einfach zu lösen sind.
            Ansonsten kannst du die Challenges Schritt für Schritt mittels Hinweisen meistern.
            Folgende Challenges wirst du im Rahmen der SQL-Injection durchführen: <br><br> 1. SQL-Injection angreifbare Login-Seite (einfach)<br>
            2. Union-based-Injection (mittel)<br><br>
            <h3 style="color:blue" id="Chall1">1. SQL-Injection angreifbare Login-Seite </h3> Diese Challenge ist durch die Abfrage angreifbar implementiert.
            Das Ziel dieser Challenge ist die Sicherheitslücke ausnutzen um die Daten von Datenbank anzeigen zu lassen. Für Ünterstützung dieser Challengelösung wird bei jedem Versuch der Eingabe ein SQL query gezeigt. Außerdem zeigt ein Filter, der überprüft, ob die Eingabe richtige Lösungsinhalte enthalten ist.
            Erst nachdem du die Stufe 1 gelöst hast, kannst du ein Flag für die nächste Challenge erhalten.
            Wenn du Schwierigkeiten hast die Challenge zu lösen, gibt es unterschiedliche Lösungsvorschläge.
        </span><br>
        <a href="javascript:history.back()"> Zurück zur Challenge Seite</a>
        <h3 style="color:blue" id="Chall2"> 2. Union-based-Injection </h3>
        <span style="font-size: 16px;"> UNION-SQL-Operator wird genutzt, um die Ergebnisse von zwei oder mehr SELECT-Anweisungen zu einem Ergebnis zu kombinieren.
            Diese Challenge ist möglich in 3 Schritten zu lösen. Die Hinweise werden für jede Herausforderungen individuell nummeriert und bietet die Möglichkeiten die Challenge Schritt für Schritt zu lösen.
            Wenn du gesammte Umsätze aller Filiale mithilfe dieser Herausforderungen berechnet hast, hast du SQL-Injection Challenge erfolgreich abgeschlossen. </span><br>
        <a href="javascript:history.back()"> Zurück zur Challenge Seite</a><br><br>
    </div>

    <br>
    <div id="massnahmen" style="background-color: #0000000d;border-top-left-radius: 10px;border-top-right-radius: 10px;border-bottom-left-radius: 10px;border-bottom-right-radius: 10px;width: 1250px;margin: 10px auto;padding: 10px 51px;">
        <h1> Sicherheitsmaßnahmen </h1>
        <span style="font-size: 16px;">Wenn ein SQL-Datenbank SQL-Injection ausführbar ist, ist das Gefahr da, dass die Daten im Dantenbank sofort zerstört
            oder böswillig zugriefen werden. All das zu verhindern, gibt es einige effektive Methoden gegen SQL-Injection. An erster Stelle muss du vorbereitete Anweisungen
            in deinem Code intergrieren. Damit kannst du die Datenbankabfragen sicherer und zuverlässiger durchgeführen.Hier wird nicht die Rohabfrage an die Datenbank gesendet,
            sondern die Struktur der Abfrage mitgetteilt, die du senden möchtest. Zum Beispiel:<br><br> $stmt = $conn->prepare("INSERT INTO Product (Name, Preis) VALUES (?, ?)"); <br>
            $stmt->bind_param("sd", $Name, $Preis); <br><br> Andere mögliche Schutzen sind: <br><br>
            -> Benutzereingaben bereinigen ( mysql_real_escape_string() ) <br> -> Web Application Firewall
            <br> -> Verwenden LIMIT und andere SQL-Kontrollen innerhalb von Abfragen <br> -> Zugriffskontrolle ( Festlegen von Datenbankberechtigungen und Trennen von Benutzern )
            <br> -> Webserver in einer anderen Domain sperren <br> -> Auf der Webseite sollte kein Fehler angezeigt werden. </span><br><br>
    </div>
    <br><br>
    <br><br>



</body>