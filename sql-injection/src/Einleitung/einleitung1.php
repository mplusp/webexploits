<body>

    <div class=" title" style=" background-color: #0003;color: black;text-align: left;height: 30px;">
        <div style="margin: 3px 774px;font-size: 16px; position: absolute; "><a href="http://localhost"
                style="text-decoration: none;"> <span style="color :black; ">Home</span></a></div>
        <div style="margin: 5px 847px;font-size: 13px; position: absolute; width:145px;"><a
                href="http://localhost:5000/command_injection_1" style="text-decoration: none;"> <span
                    style="color :black; ">Command-Injection</span></a></div>
        <div style="margin: 5px 1000px;font-size: 13px; position: absolute; width:145px;"><a
                href="http://localhost:3000" style="text-decoration: none;"> <span
                    style="color :black; ">Path-Traversal</span></a></div>
        <div style="margin: 5px 1125px;font-size: 13px; position: absolute; width:145px;"><a
                href="http://localhost:8026" style="text-decoration: none;"> <span
                    style="color :black; ">SQL-Injection</span></a></div>
        <div style="margin: 5px 1230px;font-size: 13px; position: absolute; width:145px;"><a
                href="http://localhost:8026/xssMain.php" style="text-decoration: none;"> <span
                    style="color :black; ">XSS-Injection</span></a></div>

        <h1 style="padding: 2px 12px;font-size: 20px;"> Web-Exploitation-Demos
        </h1>
    </div>
    <br><br>
    <span style="color:blue;"> <a href="#dif" style="text-decoration:none">1. Eine Definition:
            SQL-Injection</a></span><br><br>
    <span style="color:blue;"> <a href="#uebersicht" style="text-decoration:none">2. Übersicht
            SQL-Injection-Challenges</a></span><br><br>
    <span style="color:blue;"><a href="#massnahmen" style="text-decoration:none"> 3. Sicherheitsmaßnahmen gegen
            SQL-Injection</a> </span><br><br>
    <a href="../../index.php">Zurück zur Challenge</a><br><br>



    <div id="dif"
        style="background-color: #0000000d;border-top-left-radius: 10px;border-top-right-radius: 10px;border-bottom-left-radius: 10px;border-bottom-right-radius: 10px;width: 1250px;margin: 10px auto;padding: 10px 51px;">
        <h1> SQL-Injection: Eine Definition </h1>
        <span style="font-size: 16px;">
            SQL-Injection ist eine häufig genutzte Attacke in Web-Anwendungen. Die meisten Sicherheitslücken bestehen
            bei Datenbankabfragen wie zum Beispiel ein Suchbegriff bei einer Suche oder der Benutzername bei einer
            Anmeldung. Beispiele für ausführbare SQL-Injection sind: </span><br><br>
        1. SELECT * FROM ‘Produkt‘ WHERE ‘Name‘ LIKE ’%begriff%’; (Angreifbarere SQL-Query für eine Suche)<br><br>
        2. DROP TABLE ‘Product‘; (Gefährliche ausführbare Abfrage) <br></span><br><br>
        Es gibt unterschiedliche Arten von SQL-Injections. Dabei handelt es sich um die folgenden:(*)
        <br><br><strong> -> Error-based SQL-Injections</strong><br>Angreifer versuchen mit Hilfe Sonderzeichen
        auszunutzen, ob die auf die Datenbank zuzugreifen k. Dabei reicht im einfachsten Fall das Einfügen eines
        Anführungszeichens ', um ein SQL-Statement so zu verändern, dass es zu einem Fehler führt.<br><br> <strong>->
            Union-based SQL-Injections</strong><br>Bei union-basierten SQL-Injections wird der Operator UNION aus SQL
        ausgenutzt, um das Ergebnis von mehreren SELECT-Statements in einem Resultat zu kombinieren, das dann
        zurückgegeben wird. Damit können die Daten von anderen Tabellen innerhalb der Datenbank abgefragt
        werden.<br><br><strong>-> Boolean-based blind SQL-Injections</strong>
        <br> Bei boolean-based blind SQL-Injections wird ein SQL-Statement so verändert, dass entweder eine wahre oder
        eine falsche Aussage entsteht. Wenn sich die Antwort zu einer dieser Aussagen verändert, kann durch eine Serie
        von Anfragen die Datenbank Zeichen für Zeichen ausgelesen werden.
        <br><br><strong>-> Time-based blind
            SQL-Injections</strong><br>Bei time-based blind SQL-Injections werden SQL-Statements injiziert, die bei
        einer
        wahren Aussage verzögern und bei einer falschen Aussage sofort antworten. Damit kann die Datenbank wieder
        Zeichen für Zeichen
        ausgelesen werden.<br><br>
        <strong>-> Out-of-band blind SQL-Injections</strong><br>Bei out-of-band blind SQL-Injection wird versucht eine
        Netzwerkintegration mit einem durch den Angreifer kontrollierten System herzustellen. Dabei wird in den meisten
        Fällen versucht, eine DNS-Abfrage auszulösen.
        <br><br><br>
        (*) - https://www.scip.ch/?labs.20190912 </span><br><br>

    </div>
    <br>


    <div id="uebersicht"
        style="background-color: #0000000d;border-top-left-radius: 10px;border-top-right-radius: 10px;border-bottom-left-radius: 10px;border-bottom-right-radius: 10px;width: 1250px;margin: 10px auto;padding: 10px 51px;">
        <h1> Übersicht SQL-Injection-Challenges </h1>
        <span style="font-size: 16px;"> SQL-Injection-Challenge beinhaltet zwei Challenges. Der Schwierigkeitsgrad der
            Challenges wird in Stufen einfach und mittel eingeteilt. Wenn du etwas Erfahrung mit SQL-Injection hast,
            kann es sein, dass die Challenges einfach zu lösen sind. Ansonsten kannst du die Challenges Schritt für
            Schritt mithilfe der Hinweisen meistern. Folgende Challenges wirst du im Rahmen der SQL-Injection
            durchführen:
            <br><br> 1. SQL-Injection angreifbare
            Login-Seite (einfach)<br>
            2. Union-based-Injection (mittel)<br><br>
            <h3 style="color:blue" id="Chall1">1. SQL-Injection angreifbare Login-Seite </h3> Diese Challenge ist durch
            die Abfrage angreifbar implementiert. Das Ziel dieser Challenge ist die Sicherheitslücke ausnutzen, um die
            Daten der Datenbank anzeigen zu lassen. Für Unterstützung dieser Challengelösung wird bei jedem Versuch der
            Eingabe ein SQL-query gezeigt. Außerdem zeigt ein Filter, ob die Eingabe Teile der
            Lösung enthält. Erst nachdem du die Stufe 1 gelöst hast, enthälst du eine Flag für die nächste
            Challenge. Wenn du Schwierigkeiten hast, die Challenge zu lösen, gibt es unterschiedliche
            Lösungsvorschläge.
        </span><br>
        <a href="../index.php">
            Zurück zur Challenge-Seite
        </a>
        <h3 style="color:blue" id="Chall2"> 2. Union-based-Injection </h3>
        <span style="font-size: 16px;"> Der UNION-SQL-Operator wird genutzt, um die Ergebnisse von zwei oder mehr
            SELECT-Anweisungen zu einem Ergebnis zu kombinieren. Es ist möglich diese Challenge in drei Schritten zu
            lösen.
            Die Hinweise werden für jede Herausforderungen individuell nummeriert und bietet die Möglichkeit die
            Challenge Schritt für Schritt zu lösen. Wenn du die gesamten Umsätze aller Filiale mit Hilfe dieser
            Herausforderungen berechnet hast, dann hast du SQL-Injection-Challenge erfolgreich abgeschlossen.
        </span><br>
        <a href="../index.php">
            Zurück zur Challenge-Seite
        </a><br><br>
    </div>

    <br>
    <div id="massnahmen"
        style="background-color: #0000000d;border-top-left-radius: 10px;border-top-right-radius: 10px;border-bottom-left-radius: 10px;border-bottom-right-radius: 10px;width: 1250px;margin: 10px auto;padding: 10px 51px;">
        <h1> Sicherheitsmaßnahmen </h1>
        <span style="font-size: 16px;">Durch SQL-Injection besteht der Gefahr, dass die Daten in der Datenbank
            zerstört werden können oder dass auf sie unberichtigt zugriefen werden können.
            oder böswillig zugreifen werden. Um das zu verhindern, gibt es einige effektive Methoden gegen
            SQL-Injection. An erster Stelle sollten vorbereitete Anweisungen
            im Code integriert werden. Damit werden die Datenbankabfragen sicherer und zuverlässiger
            durchgeführt. Hier wird nicht die Rohabfrage an die Datenbank gesendet,
            sondern die Struktur der Abfrage mitgeteilt, die gesendet werden sollen. Zum Beispiel:<br><br> $stmt =
            $conn->prepare("INSERT INTO Product (Name, Preis) VALUES (?, ?)"); <br>
            $stmt->bind_param("sd", $Name, $Preis); <br><br> Andere mögliche Schutzmassnahmen sind: <br><br>
            -> Benutzereingaben bereinigen ( mysql_real_escape_string() ) <br> -> Web-Application-Firewall
            <br> -> LIMIT und andere SQL-Kontrollen innerhalb von Abfragen Verwenden <br> -> Zugriffskontrolle (
            Festlegen von Datenbankberechtigungen und Trennen von Benutzern )
            <br> -> Webserver in eine andere Domain sperren <br> -> Auf der Webseite sollte keine Fehler angezeigt
            werden. </span><br><br>
    </div>
    <br><br>
    <br><br>



</body>