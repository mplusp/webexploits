<span style="color:blue;"><a href="#def" style="text-decoration:none"> 1. Eine Definition: XSS-Injection</a></span>
<br><br>
<span style="color:blue;"> <a href="#uebersicht" style="text-decoration:none">2. Übersicht XSS-Injection
        Challenges</a></span>
<br><br>
<span style="color:blue;"><a href="#massnahmen" style="text-decoration:none"> 3. Sicherheitsmaßnahmen gegen
        XSS-Injection</a> </span>
<br><br>

<a href="../../xssMain.php">Zurück</a><br><br>
<div id="dif" style="background-color: #0000000d;border-top-left-radius: 10px;border-top-right-radius: 10px;border-bottom-left-radius: 10px;border-bottom-right-radius: 10px;width: 1250px;
margin: 10px auto;
padding: 10px 51px;">
    <h1> XSS-Injection: Eine Definition </h1>
    <span style="font-size: 16px; margin:30px;"> XSS-Injections sind eine der häufigsten genutzten Angriffe in Internet.
        Der schädliche Script Code wird in einer vertrauenswürdigen Webseite plaziert, um die sensiblen Daten zu
        stehlen. In HTML und PHP werden solche Skript-Parameter wie Get, POST oder document.cookie genutzt, um in die
        Kommunikation zwischen Client und Server einzuschleusen. Die meisten Webseiten benutzen diese
        Programmiersprache. Deswegen sind XSS Attacken ein beliebtes Mittel für die Angreifer, um an Benutzerdaten zu
        gelangen. <br><br></span>
    <span> Je nachdem, wie die Webanwendung vom Browser behandelt wird, variiert auch der Schweregrad der Attacke. Im
        schlimmsten Fall erlangen die Angreifer weitreichende Zugriffsrechte auf das System des Nutzers und können somit
        etwa auf lokale Daten zugreifen. Selbst eine komplette Übernahme des betroffenen Systems ist über XSS möglich.
        Zu weiteren XSS-basierten Angriffsarten zählen unter anderem Phishing.<br><br>
        Es gibt drei Arten von XSS-Injections. Dabei handelt es sich um die folgenden: <br><br> -> Reflektiertes Cross
        Site Scripting<br>
        Beim reflektierten XSS wird das schädliche Skript serverseitig verarbeitet. Der Angreifer sendet
        scriptinfizierten Link wie E-Mail zum Opfer. Sobald dieser den Link anklickt, wird der Schadcode gestartet und
        ein Skript ausgeführt. Dann imitieren die Angreifer Formulare und Websites, binden ein Skript ein und gelangen
        so an Session-Cookies mit Benutzerdaten. Im vergleich zu den anderen XSS Attacke ist reflektiertes XSS das
        Gefahrenpotenzial relativ gering.<br><br>
        -> Persitentes Cross Site Scripting<br> Bei persistenten XSS Attacken wird der Schadcode dauerhaft in einer
        Datenbank gespeichert. die Attacke zielt auf alle Besucher des betroffenen Portals wie Foren, Communities oder
        Gästebüchern ab. Da solche Websites selten die Eingaben überprüfen. Persistente Attacken haben großes
        Gefahrenpotenzial.<br><br>
        -> Lokales Cross Site Scripting (DOM-basiert) <br>Bei lokalem XSS wird der Schadcode an einen Anwender
        übermittelt, um ihn zum Beispiel im Browser auszuführen. Eine lokale XSS Attacke ist immer direkt ausführbarer
        Schadcode, der nicht von einer Schwachstelle in der Server-Client-Kommunikation abhängt.</span><br><br>
</div><br>

<div id="uebersicht"
    style="background-color: #0000000d;border-top-left-radius: 10px;border-top-right-radius: 10px;border-bottom-left-radius: 10px;border-bottom-right-radius: 10px;width: 1250px;margin: 10px auto;padding: 10px 51px;">
    <h1> Übersicht XSS-Injection Challenges </h1>
    <span style="font-size: 16px; margin:30px;">XSS-Injection Challenge beiinhaltet 2 Challenges, die jeweils
        unterschiedlich eingestuft sind. Wenn du gute Kenntnisse in Programmiersprache Javascript hast, ist es möglich
        die Challenges einfach zu lösen. Ansonsten kannst du die Challenges mit Hilfe von Hinweisen meistern. Diese
        Challenges sollen als Einstieg in die Thematik des XSS Attacke dienen. <br><br> Folgende Challenges wirst du im
        Rahmen der XSS-Injection durchführen: <br><br>
        1. Reflektiertes Cross Site Scripting (einfach, mittel, schwer)<br>
        2. Reflektiertes Cross Site Scripting (einfach, mittel)<br><br>
        <h3 style="color:blue" id="Chall1"> Reflektiertes Cross Site Scripting</h3>
        Reflektiertes XSS ist die einfachste Form von XSS. Ein Parameter wird an die Applikation übertragen und
        anschließend ungefiltert wieder an den Browser zurückgesendet. Genau mit diesem Problem wird sich reflektiertes
        XSS Challenges beschäftigen.
        Diese Challelge ist aufeinander in 3 Stufen aufgebaut. Um von einer zu anderen Stufe zu kommen musst du die
        jeweilige Stufe lösen. Dann bekommst einen Code für die nächste Stufe. Nachdem du alle 3 Stufen gelöst hast,
        erhältst du den Flag für die nächste Challenge "Persistentes XSS".
        Wenn du Schwierigkeiten hast die Challenges zu lösen, gibt es für jede Stufe eine Lösung.
    </span>
    <h3 style="color:blue" id="Chall2">Persistentes Cross Site Scripting</h3>
    <span style="font-size: 16px;"> Bei persistentes XSS wird der Schadcode permament in der Datenbank abgelegt. Diese
        Challenge beschäftigt sich mit diesem Problem in zwei Stufen. Der Aufbau der Challelge ist genau wie die
        reflektiertes XSS Challenge. Wenn die du 2-te Stufe gelöst hast, ist die XSS-Injection Challenges erfolgreich
        abgeschloßen.
    </span>
    <br><br>
</div><br>
<div id="massnahmen"
    style="background-color: #0000000d;border-top-left-radius: 10px;border-top-right-radius: 10px;border-bottom-left-radius: 10px;border-bottom-right-radius: 10px;width: 1250px;margin: 10px auto;padding: 10px 51px;">
    <h1> Sicherheitsmaßnahmen </h1>
    <span> Wenn man vor XSS Attacke schützen will, kann man sowohl auf Clientseite als auch auf Serverseite
        Schutzmaßnahmen ergreifen. Die sicherste Methode auf beiden Seiten ist die Einschränkung von Scriptcode wie z.B.
        beim Browser-Add-on NoScript und das Anlegen einer Whitelist. Noch eine sinnvole Massnahme ist bestimmte Zeichen
        aus Skripten umzuwandeln. So wird vermieden, dass ausführbare Metazeichen von Skripten vom Server oder Client
        eingelesen werden.
        Einfache XSS-Attacken wehren Sie außerdem durch den Einsatz von Web-Application-Firewalls. </span><br><br>
</div>
<br><br>