"use strict";
const express = require("express");
const app = express();
const path = require("path");

// process environment variables
const main_website_url = process.env.MAIN_WEBSITE_URL || "http://localhost";
const main_website_port = process.env.MAIN_WEBSITE_PORT || 80;

const path_traversal_url = process.env.PATH_TRAVERSAL_URL || "http://localhost";
const path_traversal_port = process.env.PATH_TRAVERSAL_PORT || 3000;

const command_injection_url =
  process.env.COMMAND_INJECTION_URL || "http://localhost";
const command_injection_port = process.env.COMMAND_INJECTION_PORT || 5000;
const command_injection_path =
  process.env.COMMAND_INJECTION_PATH || "command_injection_1";

const sql_injection_url = process.env.SQL_INJECTION_URL || "http://localhost";
const sql_injection_port = process.env.SQL_INJECTION_PORT || 5000;

// database
const sqlite3 = require("sqlite3").verbose();
const db_file = path.join(__dirname, "db", "progress.db");
const db = new sqlite3.Database(db_file, (err) => {
  if (err) {
    return console.error(err.message);
  }
  console.log(`Successful connection to the database ${db_file}`);
  return db;
});

// setup express app
app.set("view engine", "ejs");

app.use(
  "/bootstrap",
  express.static(path.join(__dirname, "/node_modules/bootstrap/dist"))
);
app.use("/css", express.static(path.join(__dirname, "/css")));
app.use("/js", express.static(path.join(__dirname, "/js")));
app.use("/assets", express.static(path.join(__dirname, "/assets")));

// routing
app.get("/", (req, res) => {
const progress = get_progress();

  res.render("index", {
    main_website_url,
    main_website_port,
    path_traversal_url,
    path_traversal_port,
    command_injection_url,
    command_injection_port,
    command_injection_path,
    sql_injection_url,
    sql_injection_port,
  });
});

app.post("/check-flag", (req, res) => {
  const challenge_name = req.query.challenge_name;
  const challenge_flag = req.query.challenge_flag;

  check_flag(challenge_name, challenge_flag, (is_flag_correct) => {
    console.log("is_flag_correct:", is_flag_correct);

    const statement = `UPDATE challenge
    SET is_solved = ?
    WHERE name = ?;`;
    const statement_params = [is_flag_correct, challenge_name];

    db.run(statement, statement_params, (err) => {
      if (err) {
        console.log(err.message);
      }
      console.log("executed ", statement, "with", statement_params);
    });
    res.send({ challenge_name, challenge_flag, is_flag_correct });
  });
});

// start server
app.listen(3000, () => {
  console.log(
    new Date().toISOString(),
    "Node server running @",
    `${main_website_url}:${main_website_port}`
  );
});

// utility functions
const check_flag = (challenge_name, challenge_flag, callback) => {
  console.table({ challenge_name, challenge_flag });

  const query = `SELECT flag FROM challenge
  WHERE name = ?;`;
  const query_params = [challenge_name];

  db.get(query, query_params, (err, row) => {
    if (err) {
      console.log(err.message);
    }

    console.log("challenge_flag:", challenge_flag, "row.flag:", row.flag);

    if (challenge_flag === row.flag) {
      callback(1);
    } else {
      callback(0);
    }
  });
};

const _get_progress_for_challenge = (challenge_name, callback) => {
  console.log({ challenge_name });

  const query = `SELECT is_solved FROM challenge
  WHERE name = ?;`;
  const query_params = [challenge_name];

  db.get(query, query_params, (err, row) => {
    if (err) {
      console.log(err.message);
    }
    console.log("row.is_solved:", row.is_solved);
    callback(row.is_solved);
  });
};

const get_progress = () => {
  let progress = {};

  const challenge_name = "sql-injection_level-1";
  
  _get_progress_for_challenge(challenge_name, (result) => {
    console.log(`progress for ${challenge_name}:`, result);
    
    progress[challenge_name] = result;
    console.log(`progress:`, progress);
  });


}